---
- name: Set Host IP Type to Static
  hosts: all
  # gather_facts: no  # Disable fact gathering for this play

  tasks:
    - name: Block I - Set IP to Static on Windows Hosts
      block:
        - name: Get Current Net Adapter
          win_shell: Get-NetAdapter | Format-List
          register: net_adapter

        - name: Find InterfaceIndex
          set_fact:
            interface_index: "{{ net_adapter.stdout_lines | map('regex_search', 'InterfaceIndex.*') | select | list | first | regex_search('(\\d+)') }}"

        - name: Remove IP Configuration
          win_shell: Remove-NetIPAddress -IPAddress {{ inventory_hostname }} -Force
            
        - name: Set New IP Configuration
          win_shell: New-NetIPAddress -InterfaceIndex {{ interface_index }} -IPAddress {{ inventory_hostname }} -PrefixLength 24 -DefaultGateway 192.168.1.1

        - name: Set DNS Configuration
          win_shell: Set-DnsClientServerAddress -InterfaceIndex {{ interface_index }} -ServerAddresses 8.8.8.8,8.8.8.4
            
        - name: Display current IP configuration
          debug:
            msg: "Current IP configuration is {{ inventory_hostname }} ({{ ansible_os_family }}): {{ interface_index }}"

          
      when: ansible_os_family == "Windows"

      
#    - name: Block II - Set IP to Static on Debian Hosts
#      block:
#        - name: Check if netplan directory exists
#          stat:
#            path: /etc/netplan  # Adjust the directory path as needed
#          register: netplan_directory
#      
#        - name: Create netplan directory if it doesn't exist
#          file:
#            path: /etc/netplan
#            state: directory
#          when: not netplan_directory.stat.exists
#      
#        - name: Check if netplan directory is non-empty
#          shell: ls -A /etc/netplan  # List non-dot files in the directory
#          register: netplan_files
#          ignore_errors: yes  # Ignore error if the directory is empty or doesn't exist
#
#        - name: Get the name of the first file
#          set_fact:
#            first_netplan_file: "{{ netplan_files.stdout_lines | first }}"
#          when: netplan_files.stdout
#
#        - name: Get desired netplan configuration
#          pause:
#            prompt: "Please enter the desired netplan configuration: "
#          register: net_config
#          when: not netplan_files.stdout
#
#        - name: Create netplan configuration
#          become: yes
#          become_ask_pass: yes
#          copy:
#            content: "{{ net_config }}"
#            dest: "/etc/netplan/01-netcfg.yaml"  # Use the name of the first file
#          when: not netplan_files.stdout
#          notify:
#            - Apply Netplan Config
#      
#        - name: Update netplan configuration
#          become: yes
#          become_ask_pass: yes
#          lineinfile:
#            path: "/etc/netplan/{{ first_netplan_file }}"  # Use the name of the first file
#            regexp: '^(\s*dhcp4:\s*yes)'  # Replace with the appropriate line to find
#            line: '    dhcp4: no'
#          when: netplan_files.stdout
#          notify:
#            - Apply Netplan Config
#      when: ansible_os_family == "Debisan"

  handlers:
    - name: Apply Netplan Config
      command: netplan apply
